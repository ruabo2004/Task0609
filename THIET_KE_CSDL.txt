═══════════════════════════════════════════════════════════════════════════════
                    HỆ THỐNG QUẢN LÝ HOMESTAY - THIẾT KẾ CƠ SỞ DỮ LIỆU
═══════════════════════════════════════════════════════════════════════════════

📋 MỤC LỤC
─────────────────────────────────────────────────────────────────────────────
1. Tổng quan Database
2. Sơ đồ quan hệ thực thể (ERD)
3. Chi tiết các bảng (Tables)
4. Mối quan hệ (Relationships)
5. Indexes và Constraints
6. Views (Các khung nhìn)
7. Stored Procedures
8. Triggers
9. Queries quan trọng
10. Optimization và Best Practices

═══════════════════════════════════════════════════════════════════════════════
1. TỔNG QUAN DATABASE
═══════════════════════════════════════════════════════════════════════════════

🗄️ Thông tin cơ bản:
   - Database Name: homestay_db
   - DBMS: MySQL 8.0+
   - Character Set: utf8mb4
   - Collation: utf8mb4_unicode_ci
   - Engine: InnoDB
   - Total Tables: 11

📊 Danh sách các bảng:
   ┌────┬─────────────────────┬─────────────────────────────────────────────┐
   │ #  │ TÊN BẢNG           │ MÔ TẢ                                       │
   ├────┼─────────────────────┼─────────────────────────────────────────────┤
   │ 1  │ users              │ Thông tin người dùng (Customer/Staff/Admin) │
   │ 2  │ rooms              │ Thông tin phòng                             │
   │ 3  │ bookings           │ Đơn đặt phòng                               │
   │ 4  │ payments           │ Thanh toán                                  │
   │ 5  │ services           │ Dịch vụ bổ sung                             │
   │ 6  │ booking_services   │ Dịch vụ kèm booking (bảng trung gian)       │
   │ 7  │ reviews            │ Đánh giá của khách hàng                     │
   │ 8  │ staff_reports      │ Báo cáo công việc của nhân viên             │
   │ 9  │ staff_profiles     │ Hồ sơ nhân viên chi tiết                    │
   │ 10 │ work_shifts        │ Ca làm việc                                 │
   │ 11 │ attendance_logs    │ Chấm công                                   │
   └────┴─────────────────────┴─────────────────────────────────────────────┘

📈 Thống kê:
   - Tổng số Foreign Keys: 15
   - Tổng số Indexes: 60+
   - Tổng số Views: 3
   - Tổng số Triggers: 2
   - Tổng số Stored Procedures: 3

═══════════════════════════════════════════════════════════════════════════════
2. SƠ ĐỒ QUAN HỆ THỰC THỂ (ERD)
═══════════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────────┐
│                          ER DIAGRAM (ASCII ART)                             │
└─────────────────────────────────────────────────────────────────────────────┘

                            ┌──────────────────┐
                            │      USERS       │
                            ├──────────────────┤
                            │ PK id            │
                            │    email         │
                            │    password      │
                            │    full_name     │
                            │    phone         │
                            │    role          │
                            │    id_number     │
                            │    ...           │
                            └────────┬─────────┘
                                     │
                 ┌───────────────────┼───────────────────┐
                 │                   │                   │
                 │                   │                   │
          ┌──────▼──────┐    ┌──────▼──────┐    ┌──────▼──────┐
          │  BOOKINGS   │    │   REVIEWS   │    │ STAFF_      │
          ├─────────────┤    ├─────────────┤    │ PROFILES    │
          │ PK id       │    │ PK id       │    ├─────────────┤
          │ FK user_id  │◄───┤ FK user_id  │    │ PK id       │
          │ FK room_id  │    │ FK booking_ │    │ FK user_id  │
          │    check_in │    │    id       │    │    position │
          │    check_   │    │    rating   │    │    hire_    │
          │    out      │    │    comment  │    │    date     │
          │    status   │    └─────────────┘    └─────────────┘
          │    ...      │
          └──────┬──────┘
                 │
     ┌───────────┼───────────┐
     │           │           │
┌────▼────┐ ┌───▼────────┐ ┌▼──────────────┐
│PAYMENTS │ │BOOKING_    │ │    ROOMS      │
├─────────┤ │SERVICES    │ ├───────────────┤
│ PK id   │ ├────────────┤ │ PK id         │
│ FK book │ │ PK id      │ │    room_      │
│    ing_ │ │ FK booking │ │    number     │
│    id   │ │    _id     │ │    room_type  │
│ amount  │ │ FK service │ │    capacity   │
│ method  │ │    _id     │ │    price_per_ │
│ status  │ │ quantity   │ │    night      │
└─────────┘ │ price      │ │    status     │
            └────┬───────┘ │    amenities  │
                 │         │    images     │
            ┌────▼─────┐   └───────────────┘
            │SERVICES  │
            ├──────────┤
            │ PK id    │
            │ name     │
            │ price    │
            │ category │
            └──────────┘


┌─────────────────────────────────────────────────────────────────────────────┐
│                    CARDINALITY (Quan hệ số lượng)                           │
└─────────────────────────────────────────────────────────────────────────────┘

users ─────(1:N)────── bookings
   │ Một user có thể có nhiều bookings
   │ Một booking chỉ thuộc về một user

users ─────(1:N)────── reviews
   │ Một user có thể viết nhiều reviews
   │ Một review chỉ thuộc về một user

rooms ─────(1:N)────── bookings
   │ Một room có thể có nhiều bookings
   │ Một booking chỉ liên quan đến một room

bookings ─(1:1)─── reviews
   │ Một booking có thể có một review
   │ Một review chỉ cho một booking

bookings ─(1:N)─── payments
   │ Một booking có thể có nhiều payments
   │ Một payment chỉ cho một booking

bookings ─(N:M)─── services
   │ Một booking có thể có nhiều services
   │ Một service có thể trong nhiều bookings
   │ (Thông qua bảng trung gian booking_services)

users ─────(1:1)────── staff_profiles
   │ Một user (staff) có một profile
   │ Một staff_profile thuộc về một user

users ─────(1:N)────── work_shifts
   │ Một staff có nhiều ca làm
   │ Một ca làm thuộc về một staff

users ─────(1:N)────── attendance_logs
   │ Một staff có nhiều log chấm công
   │ Một log thuộc về một staff

═══════════════════════════════════════════════════════════════════════════════
3. CHI TIẾT CÁC BẢNG (TABLES)
═══════════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────────┐
│ 3.1. BẢNG USERS (Người dùng)                                                │
└─────────────────────────────────────────────────────────────────────────────┘

Mô tả: Lưu trữ thông tin tất cả người dùng trong hệ thống

╔════════════════╦═══════════════╦═════════╦═══════╦═════════════════════════╗
║ COLUMN NAME    ║ DATA TYPE     ║ NULL    ║ KEY   ║ DESCRIPTION             ║
╠════════════════╬═══════════════╬═════════╬═══════╬═════════════════════════╣
║ id             ║ INT           ║ NO      ║ PK    ║ ID tự động tăng         ║
║ email          ║ VARCHAR(255)  ║ NO      ║ UNI   ║ Email (unique)          ║
║ password       ║ VARCHAR(255)  ║ NO      ║       ║ Mật khẩu đã hash        ║
║ full_name      ║ VARCHAR(255)  ║ NO      ║       ║ Họ tên đầy đủ           ║
║ phone          ║ VARCHAR(20)   ║ YES     ║       ║ Số điện thoại           ║
║ date_of_birth  ║ DATE          ║ YES     ║       ║ Ngày sinh               ║
║ nationality    ║ VARCHAR(100)  ║ YES     ║       ║ Quốc tịch               ║
║ id_number      ║ VARCHAR(50)   ║ YES     ║ IDX   ║ CMND/CCCD/Passport      ║
║ address        ║ TEXT          ║ YES     ║       ║ Địa chỉ                 ║
║ role           ║ ENUM          ║ NO      ║ IDX   ║ customer/staff/admin    ║
║ avatar         ║ VARCHAR(255)  ║ YES     ║       ║ URL ảnh đại diện        ║
║ is_active      ║ BOOLEAN       ║ NO      ║ IDX   ║ Trạng thái active       ║
║ created_at     ║ TIMESTAMP     ║ NO      ║       ║ Thời gian tạo           ║
║ updated_at     ║ TIMESTAMP     ║ NO      ║       ║ Thời gian cập nhật      ║
╚════════════════╩═══════════════╩═════════╩═══════╩═════════════════════════╝

ENUM Values:
   - role: 'customer', 'staff', 'admin'

Constraints:
   - PRIMARY KEY (id)
   - UNIQUE KEY (email)
   - CHECK (email LIKE '%@%.%')

Indexes:
   - idx_email (email)
   - idx_role (role)
   - idx_active (is_active)
   - idx_nationality (nationality)
   - idx_id_number (id_number)

Sample Data:
   Admin:    admin@homestay.com / Admin123
   Staff:    staff@homestay.com / Staff123
   Customer: customer@example.com / Customer123


┌─────────────────────────────────────────────────────────────────────────────┐
│ 3.2. BẢNG ROOMS (Phòng)                                                     │
└─────────────────────────────────────────────────────────────────────────────┘

Mô tả: Lưu trữ thông tin các phòng trong homestay

╔════════════════╦═══════════════╦═════════╦═══════╦═════════════════════════╗
║ COLUMN NAME    ║ DATA TYPE     ║ NULL    ║ KEY   ║ DESCRIPTION             ║
╠════════════════╬═══════════════╬═════════╬═══════╬═════════════════════════╣
║ id             ║ INT           ║ NO      ║ PK    ║ ID tự động tăng         ║
║ room_number    ║ VARCHAR(20)   ║ NO      ║ UNI   ║ Số phòng (unique)       ║
║ room_type      ║ ENUM          ║ NO      ║ IDX   ║ Loại phòng              ║
║ name           ║ VARCHAR(255)  ║ YES     ║       ║ Tên phòng               ║
║ capacity       ║ INT           ║ NO      ║       ║ Sức chứa (số người)     ║
║ size           ║ DECIMAL(8,2)  ║ YES     ║       ║ Diện tích (m²)          ║
║ floor          ║ INT           ║ YES     ║       ║ Tầng                    ║
║ bed_type       ║ VARCHAR(100)  ║ YES     ║       ║ Loại giường             ║
║ price_per_     ║ DECIMAL(10,2) ║ NO      ║ IDX   ║ Giá theo đêm            ║
║ night          ║               ║         ║       ║                         ║
║ original_      ║ DECIMAL(10,2) ║ YES     ║       ║ Giá gốc (để tính        ║
║ price          ║               ║         ║       ║ discount)               ║
║ description    ║ TEXT          ║ YES     ║       ║ Mô tả phòng             ║
║ amenities      ║ JSON          ║ YES     ║       ║ Tiện nghi (array)       ║
║ images         ║ JSON          ║ YES     ║       ║ Ảnh phòng (array URLs)  ║
║ image_url      ║ VARCHAR(255)  ║ YES     ║       ║ Ảnh chính               ║
║ status         ║ ENUM          ║ NO      ║ IDX   ║ Trạng thái phòng        ║
║ rating         ║ DECIMAL(3,2)  ║ YES     ║       ║ Đánh giá trung bình     ║
║ review_count   ║ INT           ║ YES     ║       ║ Số lượng đánh giá       ║
║ created_at     ║ TIMESTAMP     ║ NO      ║       ║ Thời gian tạo           ║
║ updated_at     ║ TIMESTAMP     ║ NO      ║       ║ Thời gian cập nhật      ║
╚════════════════╩═══════════════╩═════════╩═══════╩═════════════════════════╝

ENUM Values:
   - room_type: 'single', 'double', 'suite', 'family'
   - status: 'available', 'occupied', 'maintenance', 'cleaning'

JSON Fields:
   - amenities: ["WiFi", "TV", "Air Conditioning", "Mini Bar", ...]
   - images: ["/uploads/rooms/room1_1.jpg", "/uploads/rooms/room1_2.jpg", ...]

Constraints:
   - PRIMARY KEY (id)
   - UNIQUE KEY (room_number)
   - CHECK (capacity > 0)
   - CHECK (price_per_night > 0)
   - CHECK (rating BETWEEN 0 AND 5)

Indexes:
   - idx_room_number (room_number)
   - idx_room_type (room_type)
   - idx_status (status)
   - idx_price (price_per_night)


┌─────────────────────────────────────────────────────────────────────────────┐
│ 3.3. BẢNG BOOKINGS (Đặt phòng)                                              │
└─────────────────────────────────────────────────────────────────────────────┘

Mô tả: Lưu trữ thông tin đặt phòng của khách hàng

╔════════════════╦═══════════════╦═════════╦═══════╦═════════════════════════╗
║ COLUMN NAME    ║ DATA TYPE     ║ NULL    ║ KEY   ║ DESCRIPTION             ║
╠════════════════╬═══════════════╬═════════╬═══════╬═════════════════════════╣
║ id             ║ INT           ║ NO      ║ PK    ║ ID tự động tăng         ║
║ user_id        ║ INT           ║ NO      ║ FK    ║ ID khách hàng           ║
║ room_id        ║ INT           ║ NO      ║ FK    ║ ID phòng                ║
║ check_in_date  ║ DATE          ║ NO      ║ IDX   ║ Ngày nhận phòng         ║
║ check_out_date ║ DATE          ║ NO      ║ IDX   ║ Ngày trả phòng          ║
║ actual_check_  ║ DATETIME      ║ YES     ║       ║ Thời gian check-in      ║
║ in             ║               ║         ║       ║ thực tế                 ║
║ actual_check_  ║ DATETIME      ║ YES     ║       ║ Thời gian check-out     ║
║ out            ║               ║         ║       ║ thực tế                 ║
║ guests_count   ║ INT           ║ NO      ║       ║ Số lượng khách          ║
║ total_amount   ║ DECIMAL(10,2) ║ NO      ║       ║ Tổng tiền               ║
║ status         ║ ENUM          ║ NO      ║ IDX   ║ Trạng thái booking      ║
║ payment_status ║ ENUM          ║ NO      ║ IDX   ║ Trạng thái thanh toán   ║
║ special_       ║ TEXT          ║ YES     ║       ║ Yêu cầu đặc biệt        ║
║ requests       ║               ║         ║       ║                         ║
║ cancellation_  ║ TEXT          ║ YES     ║       ║ Lý do hủy               ║
║ reason         ║               ║         ║       ║                         ║
║ cancelled_at   ║ DATETIME      ║ YES     ║       ║ Thời gian hủy           ║
║ created_at     ║ TIMESTAMP     ║ NO      ║       ║ Thời gian tạo           ║
║ updated_at     ║ TIMESTAMP     ║ NO      ║       ║ Thời gian cập nhật      ║
╚════════════════╩═══════════════╩═════════╩═══════╩═════════════════════════╝

ENUM Values:
   - status: 'pending', 'confirmed', 'checked-in', 'checked-out', 
             'completed', 'cancelled'
   - payment_status: 'pending', 'paid', 'partially_paid', 'refunded', 'failed'

Constraints:
   - PRIMARY KEY (id)
   - FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
   - FOREIGN KEY (room_id) REFERENCES rooms(id) ON DELETE CASCADE
   - CHECK (check_out_date > check_in_date)
   - CHECK (guests_count > 0)
   - CHECK (total_amount >= 0)

Indexes:
   - idx_user_id (user_id)
   - idx_room_id (room_id)
   - idx_status (status)
   - idx_payment_status (payment_status)
   - idx_check_dates (check_in_date, check_out_date)
   - idx_created_at (created_at)

Business Rules:
   - Không thể đặt phòng đã được booking trong cùng khoảng thời gian
   - Check-out date phải sau check-in date
   - Số khách không được vượt quá capacity của phòng


┌─────────────────────────────────────────────────────────────────────────────┐
│ 3.4. BẢNG PAYMENTS (Thanh toán)                                             │
└─────────────────────────────────────────────────────────────────────────────┘

Mô tả: Lưu trữ thông tin thanh toán

╔════════════════╦═══════════════╦═════════╦═══════╦═════════════════════════╗
║ COLUMN NAME    ║ DATA TYPE     ║ NULL    ║ KEY   ║ DESCRIPTION             ║
╠════════════════╬═══════════════╬═════════╬═══════╬═════════════════════════╣
║ id             ║ INT           ║ NO      ║ PK    ║ ID tự động tăng         ║
║ booking_id     ║ INT           ║ NO      ║ FK    ║ ID booking              ║
║ customer_id    ║ INT           ║ YES     ║ FK    ║ ID khách hàng           ║
║ amount         ║ DECIMAL(10,2) ║ NO      ║       ║ Số tiền thanh toán      ║
║ payment_method ║ ENUM          ║ NO      ║ IDX   ║ Phương thức TT          ║
║ transaction_id ║ VARCHAR(255)  ║ YES     ║ IDX   ║ Mã giao dịch từ gateway ║
║ status         ║ ENUM          ║ NO      ║ IDX   ║ Trạng thái TT           ║
║ paid_at        ║ DATETIME      ║ YES     ║       ║ Thời gian thanh toán    ║
║ refund_amount  ║ DECIMAL(10,2) ║ YES     ║       ║ Số tiền hoàn lại        ║
║ refund_reason  ║ TEXT          ║ YES     ║       ║ Lý do hoàn tiền         ║
║ refunded_at    ║ DATETIME      ║ YES     ║       ║ Thời gian hoàn tiền     ║
║ notes          ║ TEXT          ║ YES     ║       ║ Ghi chú                 ║
║ created_at     ║ TIMESTAMP     ║ NO      ║       ║ Thời gian tạo           ║
║ updated_at     ║ TIMESTAMP     ║ NO      ║       ║ Thời gian cập nhật      ║
╚════════════════╩═══════════════╩═════════╩═══════╩═════════════════════════╝

ENUM Values:
   - payment_method: 'cash', 'card', 'vnpay', 'momo', 'bank_transfer'
   - status: 'pending', 'success', 'failed', 'refunded'

Constraints:
   - PRIMARY KEY (id)
   - FOREIGN KEY (booking_id) REFERENCES bookings(id) ON DELETE CASCADE
   - FOREIGN KEY (customer_id) REFERENCES users(id) ON DELETE SET NULL
   - CHECK (amount > 0)

Indexes:
   - idx_booking_id (booking_id)
   - idx_customer_id (customer_id)
   - idx_payment_method (payment_method)
   - idx_status (status)
   - idx_transaction_id (transaction_id)
   - idx_paid_at (paid_at)


┌─────────────────────────────────────────────────────────────────────────────┐
│ 3.5. BẢNG SERVICES (Dịch vụ)                                                │
└─────────────────────────────────────────────────────────────────────────────┘

Mô tả: Lưu trữ các dịch vụ bổ sung

╔════════════════╦═══════════════╦═════════╦═══════╦═════════════════════════╗
║ COLUMN NAME    ║ DATA TYPE     ║ NULL    ║ KEY   ║ DESCRIPTION             ║
╠════════════════╬═══════════════╬═════════╬═══════╬═════════════════════════╣
║ id             ║ INT           ║ NO      ║ PK    ║ ID tự động tăng         ║
║ name           ║ VARCHAR(255)  ║ NO      ║ IDX   ║ Tên dịch vụ             ║
║ description    ║ TEXT          ║ YES     ║       ║ Mô tả dịch vụ           ║
║ price          ║ DECIMAL(10,2) ║ NO      ║ IDX   ║ Giá dịch vụ             ║
║ unit           ║ VARCHAR(50)   ║ YES     ║       ║ Đơn vị (lần, ngày, ...) ║
║ category       ║ VARCHAR(50)   ║ YES     ║ IDX   ║ Danh mục                ║
║ icon           ║ VARCHAR(255)  ║ YES     ║       ║ Icon                    ║
║ image_url      ║ VARCHAR(255)  ║ YES     ║       ║ Hình ảnh                ║
║ is_active      ║ BOOLEAN       ║ NO      ║ IDX   ║ Trạng thái active       ║
║ created_at     ║ TIMESTAMP     ║ NO      ║       ║ Thời gian tạo           ║
║ updated_at     ║ TIMESTAMP     ║ NO      ║       ║ Thời gian cập nhật      ║
╚════════════════╩═══════════════╩═════════╩═══════╩═════════════════════════╝

Categories:
   - food: Đồ ăn, thức uống
   - transport: Vận chuyển, đưa đón
   - entertainment: Giải trí
   - spa: Spa, massage
   - laundry: Giặt ủi
   - other: Khác

Constraints:
   - PRIMARY KEY (id)
   - CHECK (price >= 0)

Indexes:
   - idx_name (name)
   - idx_category (category)
   - idx_active (is_active)
   - idx_price (price)


┌─────────────────────────────────────────────────────────────────────────────┐
│ 3.6. BẢNG BOOKING_SERVICES (Dịch vụ đặt kèm booking)                        │
└─────────────────────────────────────────────────────────────────────────────┘

Mô tả: Bảng trung gian liên kết bookings và services (N:M relationship)

╔════════════════╦═══════════════╦═════════╦═══════╦═════════════════════════╗
║ COLUMN NAME    ║ DATA TYPE     ║ NULL    ║ KEY   ║ DESCRIPTION             ║
╠════════════════╬═══════════════╬═════════╬═══════╬═════════════════════════╣
║ id             ║ INT           ║ NO      ║ PK    ║ ID tự động tăng         ║
║ booking_id     ║ INT           ║ NO      ║ FK    ║ ID booking              ║
║ service_id     ║ INT           ║ NO      ║ FK    ║ ID dịch vụ              ║
║ quantity       ║ INT           ║ NO      ║       ║ Số lượng                ║
║ unit_price     ║ DECIMAL(10,2) ║ NO      ║       ║ Giá đơn vị tại thời     ║
║                ║               ║         ║       ║ điểm đặt                ║
║ total_price    ║ DECIMAL(10,2) ║ NO      ║       ║ Tổng tiền (qty × price) ║
║ created_at     ║ TIMESTAMP     ║ NO      ║       ║ Thời gian tạo           ║
╚════════════════╩═══════════════╩═════════╩═══════╩═════════════════════════╝

Constraints:
   - PRIMARY KEY (id)
   - FOREIGN KEY (booking_id) REFERENCES bookings(id) ON DELETE CASCADE
   - FOREIGN KEY (service_id) REFERENCES services(id) ON DELETE CASCADE
   - UNIQUE KEY unique_booking_service (booking_id, service_id)
   - CHECK (quantity > 0)
   - CHECK (unit_price >= 0)
   - CHECK (total_price >= 0)

Indexes:
   - idx_booking_id (booking_id)
   - idx_service_id (service_id)

Business Rules:
   - Một booking không thể có cùng service 2 lần (UNIQUE constraint)
   - Lưu unit_price tại thời điểm đặt để tránh thay đổi giá ảnh hưởng


┌─────────────────────────────────────────────────────────────────────────────┐
│ 3.7. BẢNG REVIEWS (Đánh giá)                                                │
└─────────────────────────────────────────────────────────────────────────────┘

Mô tả: Lưu trữ đánh giá của khách hàng về phòng

╔════════════════╦═══════════════╦═════════╦═══════╦═════════════════════════╗
║ COLUMN NAME    ║ DATA TYPE     ║ NULL    ║ KEY   ║ DESCRIPTION             ║
╠════════════════╬═══════════════╬═════════╬═══════╬═════════════════════════╣
║ id             ║ INT           ║ NO      ║ PK    ║ ID tự động tăng         ║
║ booking_id     ║ INT           ║ NO      ║ FK    ║ ID booking              ║
║ user_id        ║ INT           ║ NO      ║ FK    ║ ID khách hàng           ║
║ room_id        ║ INT           ║ YES     ║ FK    ║ ID phòng                ║
║ rating         ║ INT           ║ NO      ║ IDX   ║ Đánh giá (1-5 sao)      ║
║ comment        ║ TEXT          ║ YES     ║       ║ Bình luận               ║
║ images         ║ JSON          ║ YES     ║       ║ Ảnh đánh giá            ║
║ response       ║ TEXT          ║ YES     ║       ║ Phản hồi từ admin       ║
║ responded_at   ║ DATETIME      ║ YES     ║       ║ Thời gian phản hồi      ║
║ status         ║ ENUM          ║ YES     ║       ║ Trạng thái duyệt        ║
║ created_at     ║ TIMESTAMP     ║ NO      ║       ║ Thời gian tạo           ║
║ updated_at     ║ TIMESTAMP     ║ NO      ║       ║ Thời gian cập nhật      ║
╚════════════════╩═══════════════╩═════════╩═══════╩═════════════════════════╝

ENUM Values:
   - status: 'pending', 'approved', 'rejected'

Constraints:
   - PRIMARY KEY (id)
   - FOREIGN KEY (booking_id) REFERENCES bookings(id) ON DELETE CASCADE
   - FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
   - FOREIGN KEY (room_id) REFERENCES rooms(id) ON DELETE SET NULL
   - UNIQUE KEY unique_booking_review (booking_id)
   - CHECK (rating BETWEEN 1 AND 5)

Indexes:
   - idx_booking_id (booking_id)
   - idx_user_id (user_id)
   - idx_room_id (room_id)
   - idx_rating (rating)
   - idx_created_at (created_at)

Business Rules:
   - Một booking chỉ có một review (UNIQUE constraint)
   - Chỉ có thể review khi booking status = 'completed'


┌─────────────────────────────────────────────────────────────────────────────┐
│ 3.8. BẢNG STAFF_PROFILES (Hồ sơ nhân viên)                                  │
└─────────────────────────────────────────────────────────────────────────────┘

Mô tả: Thông tin chi tiết về nhân viên

╔════════════════╦═══════════════╦═════════╦═══════╦═════════════════════════╗
║ COLUMN NAME    ║ DATA TYPE     ║ NULL    ║ KEY   ║ DESCRIPTION             ║
╠════════════════╬═══════════════╬═════════╬═══════╬═════════════════════════╣
║ id             ║ INT           ║ NO      ║ PK    ║ ID tự động tăng         ║
║ user_id        ║ INT           ║ NO      ║ FK    ║ ID user (staff)         ║
║ position       ║ VARCHAR(100)  ║ YES     ║       ║ Chức vụ                 ║
║ department     ║ VARCHAR(100)  ║ YES     ║       ║ Phòng ban               ║
║ hire_date      ║ DATE          ║ YES     ║       ║ Ngày vào làm            ║
║ salary         ║ DECIMAL(10,2) ║ YES     ║       ║ Lương                   ║
║ emergency_     ║ VARCHAR(255)  ║ YES     ║       ║ Liên hệ khẩn cấp        ║
║ contact        ║               ║         ║       ║                         ║
║ notes          ║ TEXT          ║ YES     ║       ║ Ghi chú                 ║
║ created_at     ║ TIMESTAMP     ║ NO      ║       ║ Thời gian tạo           ║
║ updated_at     ║ TIMESTAMP     ║ NO      ║       ║ Thời gian cập nhật      ║
╚════════════════╩═══════════════╩═════════╩═══════╩═════════════════════════╝

Constraints:
   - PRIMARY KEY (id)
   - FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
   - UNIQUE KEY unique_user_profile (user_id)

Indexes:
   - idx_user_id (user_id)
   - idx_position (position)
   - idx_department (department)


┌─────────────────────────────────────────────────────────────────────────────┐
│ 3.9. BẢNG WORK_SHIFTS (Ca làm việc)                                         │
└─────────────────────────────────────────────────────────────────────────────┘

Mô tả: Quản lý ca làm việc của nhân viên

╔════════════════╦═══════════════╦═════════╦═══════╦═════════════════════════╗
║ COLUMN NAME    ║ DATA TYPE     ║ NULL    ║ KEY   ║ DESCRIPTION             ║
╠════════════════╬═══════════════╬═════════╬═══════╬═════════════════════════╣
║ id             ║ INT           ║ NO      ║ PK    ║ ID tự động tăng         ║
║ staff_id       ║ INT           ║ NO      ║ FK    ║ ID nhân viên            ║
║ shift_date     ║ DATE          ║ NO      ║ IDX   ║ Ngày làm việc           ║
║ start_time     ║ TIME          ║ NO      ║       ║ Giờ bắt đầu             ║
║ end_time       ║ TIME          ║ NO      ║       ║ Giờ kết thúc            ║
║ shift_type     ║ ENUM          ║ YES     ║       ║ Loại ca                 ║
║ status         ║ ENUM          ║ YES     ║       ║ Trạng thái ca           ║
║ notes          ║ TEXT          ║ YES     ║       ║ Ghi chú                 ║
║ created_at     ║ TIMESTAMP     ║ NO      ║       ║ Thời gian tạo           ║
╚════════════════╩═══════════════╩═════════╩═══════╩═════════════════════════╝

ENUM Values:
   - shift_type: 'morning', 'afternoon', 'evening', 'night', 'full_day'
   - status: 'scheduled', 'completed', 'absent', 'cancelled'

Constraints:
   - PRIMARY KEY (id)
   - FOREIGN KEY (staff_id) REFERENCES users(id) ON DELETE CASCADE
   - CHECK (end_time > start_time)

Indexes:
   - idx_staff_id (staff_id)
   - idx_shift_date (shift_date)
   - idx_status (status)


┌─────────────────────────────────────────────────────────────────────────────┐
│ 3.10. BẢNG ATTENDANCE_LOGS (Chấm công)                                      │
└─────────────────────────────────────────────────────────────────────────────┘

Mô tả: Ghi lại thời gian chấm công của nhân viên

╔════════════════╦═══════════════╦═════════╦═══════╦═════════════════════════╗
║ COLUMN NAME    ║ DATA TYPE     ║ NULL    ║ KEY   ║ DESCRIPTION             ║
╠════════════════╬═══════════════╬═════════╬═══════╬═════════════════════════╣
║ id             ║ INT           ║ NO      ║ PK    ║ ID tự động tăng         ║
║ staff_id       ║ INT           ║ NO      ║ FK    ║ ID nhân viên            ║
║ check_in       ║ DATETIME      ║ YES     ║       ║ Thời gian vào           ║
║ check_out      ║ DATETIME      ║ YES     ║       ║ Thời gian ra            ║
║ work_hours     ║ DECIMAL(5,2)  ║ YES     ║       ║ Số giờ làm việc         ║
║ notes          ║ TEXT          ║ YES     ║       ║ Ghi chú                 ║
║ created_at     ║ TIMESTAMP     ║ NO      ║       ║ Thời gian tạo           ║
╚════════════════╩═══════════════╩═════════╩═══════╩═════════════════════════╝

Constraints:
   - PRIMARY KEY (id)
   - FOREIGN KEY (staff_id) REFERENCES users(id) ON DELETE CASCADE

Indexes:
   - idx_staff_id (staff_id)
   - idx_check_in (check_in)
   - idx_created_at (created_at)


┌─────────────────────────────────────────────────────────────────────────────┐
│ 3.11. BẢNG STAFF_REPORTS (Báo cáo nhân viên)                                │
└─────────────────────────────────────────────────────────────────────────────┘

Mô tả: Báo cáo công việc hàng ngày của nhân viên

╔════════════════╦═══════════════╦═════════╦═══════╦═════════════════════════╗
║ COLUMN NAME    ║ DATA TYPE     ║ NULL    ║ KEY   ║ DESCRIPTION             ║
╠════════════════╬═══════════════╬═════════╬═══════╬═════════════════════════╣
║ id             ║ INT           ║ NO      ║ PK    ║ ID tự động tăng         ║
║ staff_id       ║ INT           ║ NO      ║ FK    ║ ID nhân viên            ║
║ report_date    ║ DATE          ║ NO      ║ IDX   ║ Ngày báo cáo            ║
║ checkins_count ║ INT           ║ YES     ║       ║ Số lượng check-in       ║
║ checkouts_     ║ INT           ║ YES     ║       ║ Số lượng check-out      ║
║ count          ║               ║         ║       ║                         ║
║ total_revenue  ║ DECIMAL(10,2) ║ YES     ║       ║ Tổng doanh thu          ║
║ notes          ║ TEXT          ║ YES     ║       ║ Ghi chú                 ║
║ created_at     ║ TIMESTAMP     ║ NO      ║       ║ Thời gian tạo           ║
╚════════════════╩═══════════════╩═════════╩═══════╩═════════════════════════╝

Constraints:
   - PRIMARY KEY (id)
   - FOREIGN KEY (staff_id) REFERENCES users(id) ON DELETE CASCADE
   - UNIQUE KEY unique_staff_daily_report (staff_id, report_date)

Indexes:
   - idx_staff_id (staff_id)
   - idx_report_date (report_date)

═══════════════════════════════════════════════════════════════════════════════
4. MỐI QUAN HỆ (RELATIONSHIPS)
═══════════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────────┐
│ 4.1. ONE-TO-MANY RELATIONSHIPS (1:N)                                        │
└─────────────────────────────────────────────────────────────────────────────┘

┌──────────────────┬─────────────────────┬──────────────────────────────────┐
│ PARENT TABLE     │ CHILD TABLE         │ FOREIGN KEY                      │
├──────────────────┼─────────────────────┼──────────────────────────────────┤
│ users            │ bookings            │ bookings.user_id → users.id      │
│ users            │ reviews             │ reviews.user_id → users.id       │
│ users            │ staff_profiles      │ staff_profiles.user_id → users.id│
│ users            │ work_shifts         │ work_shifts.staff_id → users.id  │
│ users            │ attendance_logs     │ attendance_logs.staff_id → u.id  │
│ users            │ staff_reports       │ staff_reports.staff_id → users.id│
│ rooms            │ bookings            │ bookings.room_id → rooms.id      │
│ rooms            │ reviews             │ reviews.room_id → rooms.id       │
│ bookings         │ payments            │ payments.booking_id → bookings.id│
│ bookings         │ booking_services    │ booking_services.booking_id → ...|
│ services         │ booking_services    │ booking_services.service_id → ...│
└──────────────────┴─────────────────────┴──────────────────────────────────┘

Giải thích:
   - Một user (customer) có thể có nhiều bookings
   - Một room có thể có nhiều bookings ở các thời điểm khác nhau
   - Một booking có thể có nhiều payments (trường hợp thanh toán nhiều lần)
   - Một user (staff) có nhiều ca làm việc, nhiều log chấm công


┌─────────────────────────────────────────────────────────────────────────────┐
│ 4.2. ONE-TO-ONE RELATIONSHIPS (1:1)                                         │
└─────────────────────────────────────────────────────────────────────────────┘

┌──────────────────┬─────────────────────┬──────────────────────────────────┐
│ TABLE 1          │ TABLE 2             │ RELATIONSHIP                     │
├──────────────────┼─────────────────────┼──────────────────────────────────┤
│ users            │ staff_profiles      │ Một staff có một profile         │
│ bookings         │ reviews             │ Một booking có một review        │
└──────────────────┴─────────────────────┴──────────────────────────────────┘

Giải thích:
   - Một user với role='staff' có một staff_profile
   - Một booking completed chỉ có thể có một review


┌─────────────────────────────────────────────────────────────────────────────┐
│ 4.3. MANY-TO-MANY RELATIONSHIPS (N:M)                                       │
└─────────────────────────────────────────────────────────────────────────────┘

┌──────────────┬─────────────────────┬────────────────────────────────────┐
│ TABLE 1      │ TABLE 2             │ JUNCTION TABLE                     │
├──────────────┼─────────────────────┼────────────────────────────────────┤
│ bookings     │ services            │ booking_services                   │
└──────────────┴─────────────────────┴────────────────────────────────────┘

Giải thích:
   - Một booking có thể có nhiều services
   - Một service có thể được sử dụng trong nhiều bookings
   - Bảng junction booking_services lưu thông tin liên kết và số lượng

═══════════════════════════════════════════════════════════════════════════════
5. INDEXES VÀ CONSTRAINTS
═══════════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────────┐
│ 5.1. PRIMARY KEYS                                                           │
└─────────────────────────────────────────────────────────────────────────────┘

Tất cả các bảng đều có PRIMARY KEY là cột `id` kiểu INT AUTO_INCREMENT:
   - users.id
   - rooms.id
   - bookings.id
   - payments.id
   - services.id
   - booking_services.id
   - reviews.id
   - staff_profiles.id
   - work_shifts.id
   - attendance_logs.id
   - staff_reports.id

Lý do: Đơn giản hóa relationships và đảm bảo uniqueness


┌─────────────────────────────────────────────────────────────────────────────┐
│ 5.2. UNIQUE CONSTRAINTS                                                     │
└─────────────────────────────────────────────────────────────────────────────┘

╔═══════════════════╦═══════════════════════╦════════════════════════════════╗
║ TABLE             ║ COLUMN(S)             ║ PURPOSE                        ║
╠═══════════════════╬═══════════════════════╬════════════════════════════════╣
║ users             ║ email                 ║ Email không được trùng         ║
║ rooms             ║ room_number           ║ Số phòng duy nhất              ║
║ booking_services  ║ (booking_id,          ║ Tránh thêm service trùng vào   ║
║                   ║  service_id)          ║ một booking                    ║
║ reviews           ║ booking_id            ║ Một booking chỉ một review     ║
║ staff_profiles    ║ user_id               ║ Một user chỉ một profile       ║
║ staff_reports     ║ (staff_id,            ║ Một staff một báo cáo mỗi ngày ║
║                   ║  report_date)         ║                                ║
╚═══════════════════╩═══════════════════════╩════════════════════════════════╝


┌─────────────────────────────────────────────────────────────────────────────┐
│ 5.3. FOREIGN KEY CONSTRAINTS                                                │
└─────────────────────────────────────────────────────────────────────────────┘

╔══════════════════╦═══════════════════════╦══════════════════════════════════╗
║ FOREIGN KEY      ║ REFERENCES            ║ ON DELETE                        ║
╠══════════════════╬═══════════════════════╬══════════════════════════════════╣
║ bookings.user_id ║ users.id              ║ CASCADE (xóa user → xóa booking) ║
║ bookings.room_id ║ rooms.id              ║ CASCADE (xóa room → xóa booking) ║
║ payments.        ║ bookings.id           ║ CASCADE                          ║
║ booking_id       ║                       ║                                  ║
║ payments.        ║ users.id              ║ SET NULL                         ║
║ customer_id      ║                       ║                                  ║
║ reviews.         ║ bookings.id           ║ CASCADE                          ║
║ booking_id       ║                       ║                                  ║
║ reviews.user_id  ║ users.id              ║ CASCADE                          ║
║ reviews.room_id  ║ rooms.id              ║ SET NULL                         ║
║ booking_services ║ bookings.id           ║ CASCADE                          ║
║ .booking_id      ║                       ║                                  ║
║ booking_services ║ services.id           ║ CASCADE                          ║
║ .service_id      ║                       ║                                  ║
║ staff_profiles.  ║ users.id              ║ CASCADE                          ║
║ user_id          ║                       ║                                  ║
║ work_shifts.     ║ users.id              ║ CASCADE                          ║
║ staff_id         ║                       ║                                  ║
║ attendance_logs. ║ users.id              ║ CASCADE                          ║
║ staff_id         ║                       ║                                  ║
║ staff_reports.   ║ users.id              ║ CASCADE                          ║
║ staff_id         ║                       ║                                  ║
╚══════════════════╩═══════════════════════╩══════════════════════════════════╝

CASCADE: Khi xóa parent record, tự động xóa child records
SET NULL: Khi xóa parent record, set foreign key của child thành NULL


┌─────────────────────────────────────────────────────────────────────────────┐
│ 5.4. CHECK CONSTRAINTS                                                      │
└─────────────────────────────────────────────────────────────────────────────┘

╔═══════════════════╦═════════════════════════════════════════════════════════╗
║ TABLE             ║ CHECK CONSTRAINT                                        ║
╠═══════════════════╬═════════════════════════════════════════════════════════╣
║ users             ║ email LIKE '%@%.%'                                      ║
║ rooms             ║ capacity > 0                                            ║
║ rooms             ║ price_per_night > 0                                     ║
║ rooms             ║ rating BETWEEN 0 AND 5                                  ║
║ bookings          ║ check_out_date > check_in_date                          ║
║ bookings          ║ guests_count > 0                                        ║
║ bookings          ║ total_amount >= 0                                       ║
║ payments          ║ amount > 0                                              ║
║ services          ║ price >= 0                                              ║
║ booking_services  ║ quantity > 0                                            ║
║ booking_services  ║ unit_price >= 0                                         ║
║ booking_services  ║ total_price >= 0                                        ║
║ reviews           ║ rating BETWEEN 1 AND 5                                  ║
║ work_shifts       ║ end_time > start_time                                   ║
╚═══════════════════╩═════════════════════════════════════════════════════════╝


┌─────────────────────────────────────────────────────────────────────────────┐
│ 5.5. INDEXES (Performance Optimization)                                     │
└─────────────────────────────────────────────────────────────────────────────┘

╔═══════════════════╦═════════════════════════╦════════════════════════════════╗
║ TABLE             ║ INDEX NAME              ║ COLUMNS                        ║
╠═══════════════════╬═════════════════════════╬════════════════════════════════╣
║ users             ║ idx_email               ║ email                          ║
║                   ║ idx_role                ║ role                           ║
║                   ║ idx_active              ║ is_active                      ║
║                   ║ idx_id_number           ║ id_number                      ║
║───────────────────┼─────────────────────────┼────────────────────────────────║
║ rooms             ║ idx_room_number         ║ room_number                    ║
║                   ║ idx_room_type           ║ room_type                      ║
║                   ║ idx_status              ║ status                         ║
║                   ║ idx_price               ║ price_per_night                ║
║───────────────────┼─────────────────────────┼────────────────────────────────║
║ bookings          ║ idx_user_id             ║ user_id                        ║
║                   ║ idx_room_id             ║ room_id                        ║
║                   ║ idx_status              ║ status                         ║
║                   ║ idx_payment_status      ║ payment_status                 ║
║                   ║ idx_check_dates         ║ (check_in_date,check_out_date) ║
║                   ║ idx_created_at          ║ created_at                     ║
║───────────────────┼─────────────────────────┼────────────────────────────────║
║ payments          ║ idx_booking_id          ║ booking_id                     ║
║                   ║ idx_customer_id         ║ customer_id                    ║
║                   ║ idx_payment_method      ║ payment_method                 ║
║                   ║ idx_status              ║ status                         ║
║                   ║ idx_transaction_id      ║ transaction_id                 ║
║                   ║ idx_paid_at             ║ paid_at                        ║
║───────────────────┼─────────────────────────┼────────────────────────────────║
║ services          ║ idx_name                ║ name                           ║
║                   ║ idx_category            ║ category                       ║
║                   ║ idx_active              ║ is_active                      ║
║                   ║ idx_price               ║ price                          ║
║───────────────────┼─────────────────────────┼────────────────────────────────║
║ booking_services  ║ idx_booking_id          ║ booking_id                     ║
║                   ║ idx_service_id          ║ service_id                     ║
║───────────────────┼─────────────────────────┼────────────────────────────────║
║ reviews           ║ idx_booking_id          ║ booking_id                     ║
║                   ║ idx_user_id             ║ user_id                        ║
║                   ║ idx_room_id             ║ room_id                        ║
║                   ║ idx_rating              ║ rating                         ║
║                   ║ idx_created_at          ║ created_at                     ║
║───────────────────┼─────────────────────────┼────────────────────────────────║
║ staff_profiles    ║ idx_user_id             ║ user_id                        ║
║                   ║ idx_position            ║ position                       ║
║                   ║ idx_department          ║ department                     ║
║───────────────────┼─────────────────────────┼────────────────────────────────║
║ work_shifts       ║ idx_staff_id            ║ staff_id                       ║
║                   ║ idx_shift_date          ║ shift_date                     ║
║                   ║ idx_status              ║ status                         ║
║───────────────────┼─────────────────────────┼────────────────────────────────║
║ attendance_logs   ║ idx_staff_id            ║ staff_id                       ║
║                   ║ idx_check_in            ║ check_in                       ║
║                   ║ idx_created_at          ║ created_at                     ║
║───────────────────┼─────────────────────────┼────────────────────────────────║
║ staff_reports     ║ idx_staff_id            ║ staff_id                       ║
║                   ║ idx_report_date         ║ report_date                    ║
╚═══════════════════╩═════════════════════════╩════════════════════════════════╝

Lý do tạo indexes:
   ✓ Tăng tốc độ query khi WHERE, JOIN
   ✓ Tối ưu ORDER BY, GROUP BY
   ✓ Hỗ trợ các truy vấn phổ biến của application

═══════════════════════════════════════════════════════════════════════════════
6. VIEWS (CÁC KHUNG NHÌN)
═══════════════════════════════════════════════════════════════════════════════

Views là virtual tables giúp đơn giản hóa các truy vấn phức tạp


┌─────────────────────────────────────────────────────────────────────────────┐
│ 6.1. VIEW: room_occupancy_stats                                             │
└─────────────────────────────────────────────────────────────────────────────┘

Mục đích: Thống kê tình trạng sử dụng của từng phòng

Định nghĩa:
   CREATE VIEW room_occupancy_stats AS
   SELECT 
       r.id,
       r.room_number,
       r.room_type,
       COUNT(b.id) as total_bookings,
       SUM(CASE WHEN b.status IN ('confirmed', 'checked-in', 
                                   'checked-out', 'completed') 
                THEN 1 ELSE 0 END) as successful_bookings,
       AVG(b.total_amount) as avg_booking_amount,
       MAX(b.created_at) as last_booking_date
   FROM rooms r
   LEFT JOIN bookings b ON r.id = b.room_id
   GROUP BY r.id, r.room_number, r.room_type;

Cách sử dụng:
   SELECT * FROM room_occupancy_stats WHERE total_bookings > 10;


┌─────────────────────────────────────────────────────────────────────────────┐
│ 6.2. VIEW: monthly_revenue                                                  │
└─────────────────────────────────────────────────────────────────────────────┘

Mục đích: Báo cáo doanh thu theo tháng

Định nghĩa:
   CREATE VIEW monthly_revenue AS
   SELECT 
       YEAR(p.paid_at) as year,
       MONTH(p.paid_at) as month,
       COUNT(p.id) as total_payments,
       SUM(p.amount) as total_revenue,
       AVG(p.amount) as avg_payment_amount
   FROM payments p
   WHERE p.status = 'success'
   GROUP BY YEAR(p.paid_at), MONTH(p.paid_at)
   ORDER BY year DESC, month DESC;

Cách sử dụng:
   SELECT * FROM monthly_revenue WHERE year = 2025;


┌─────────────────────────────────────────────────────────────────────────────┐
│ 6.3. VIEW: customer_booking_summary                                         │
└─────────────────────────────────────────────────────────────────────────────┘

Mục đích: Tóm tắt lịch sử booking của khách hàng

Định nghĩa:
   CREATE VIEW customer_booking_summary AS
   SELECT 
       u.id as user_id,
       u.full_name,
       u.email,
       COUNT(b.id) as total_bookings,
       SUM(b.total_amount) as total_spent,
       AVG(r.rating) as avg_rating_given,
       MAX(b.created_at) as last_booking_date,
       MIN(b.created_at) as first_booking_date
   FROM users u
   LEFT JOIN bookings b ON u.id = b.user_id
   LEFT JOIN reviews r ON b.id = r.booking_id
   WHERE u.role = 'customer'
   GROUP BY u.id, u.full_name, u.email;

Cách sử dụng:
   SELECT * FROM customer_booking_summary 
   WHERE total_spent > 5000000 
   ORDER BY total_spent DESC;

═══════════════════════════════════════════════════════════════════════════════
7. STORED PROCEDURES
═══════════════════════════════════════════════════════════════════════════════

Stored Procedures là các đoạn code SQL được lưu trữ và tái sử dụng


┌─────────────────────────────────────────────────────────────────────────────┐
│ 7.1. PROCEDURE: GetAvailableRooms                                           │
└─────────────────────────────────────────────────────────────────────────────┘

Mục đích: Tìm các phòng trống trong khoảng thời gian

Parameters:
   - IN check_in DATE: Ngày check-in
   - IN check_out DATE: Ngày check-out
   - IN room_type_filter VARCHAR(20): Lọc theo loại phòng (optional)

Định nghĩa:
   DELIMITER //
   CREATE PROCEDURE GetAvailableRooms(
       IN check_in DATE,
       IN check_out DATE,
       IN room_type_filter VARCHAR(20)
   )
   BEGIN
       SELECT r.*
       FROM rooms r
       WHERE r.status = 'available'
       AND (room_type_filter IS NULL OR r.room_type = room_type_filter)
       AND r.id NOT IN (
           SELECT DISTINCT room_id 
           FROM bookings 
           WHERE status IN ('confirmed', 'checked-in')
           AND (
               (check_in_date <= check_in AND check_out_date > check_in)
               OR (check_in_date < check_out AND check_out_date >= check_out)
               OR (check_in_date >= check_in AND check_out_date <= check_out)
           )
       )
       ORDER BY r.price_per_night ASC;
   END //
   DELIMITER ;

Cách sử dụng:
   CALL GetAvailableRooms('2025-10-15', '2025-10-20', 'suite');
   CALL GetAvailableRooms('2025-10-15', '2025-10-20', NULL);


┌─────────────────────────────────────────────────────────────────────────────┐
│ 7.2. PROCEDURE: CalculateBookingTotal                                       │
└─────────────────────────────────────────────────────────────────────────────┘

Mục đích: Tính tổng tiền booking bao gồm phòng + dịch vụ

Parameters:
   - IN booking_id_param INT: ID của booking
   - OUT total_amount DECIMAL(10,2): Tổng tiền (output)

Định nghĩa:
   DELIMITER //
   CREATE PROCEDURE CalculateBookingTotal(
       IN booking_id_param INT,
       OUT total_amount DECIMAL(10,2)
   )
   BEGIN
       DECLARE room_cost DECIMAL(10,2) DEFAULT 0;
       DECLARE service_cost DECIMAL(10,2) DEFAULT 0;
       
       -- Tính tiền phòng
       SELECT 
           DATEDIFF(b.check_out_date, b.check_in_date) * r.price_per_night
       INTO room_cost
       FROM bookings b
       JOIN rooms r ON b.room_id = r.id
       WHERE b.id = booking_id_param;
       
       -- Tính tiền dịch vụ
       SELECT COALESCE(SUM(bs.total_price), 0)
       INTO service_cost
       FROM booking_services bs
       WHERE bs.booking_id = booking_id_param;
       
       SET total_amount = room_cost + service_cost;
   END //
   DELIMITER ;

Cách sử dụng:
   CALL CalculateBookingTotal(1, @total);
   SELECT @total;


┌─────────────────────────────────────────────────────────────────────────────┐
│ 7.3. PROCEDURE: GenerateMonthlyReport                                       │
└─────────────────────────────────────────────────────────────────────────────┘

Mục đích: Tạo báo cáo tháng

Parameters:
   - IN target_month INT
   - IN target_year INT

Định nghĩa:
   DELIMITER //
   CREATE PROCEDURE GenerateMonthlyReport(
       IN target_month INT,
       IN target_year INT
   )
   BEGIN
       SELECT 
           COUNT(DISTINCT b.id) as total_bookings,
           COUNT(DISTINCT b.user_id) as unique_customers,
           SUM(p.amount) as total_revenue,
           AVG(p.amount) as avg_booking_value,
           COUNT(DISTINCT CASE WHEN b.status = 'completed' 
                          THEN b.id END) as completed_bookings,
           COUNT(DISTINCT CASE WHEN b.status = 'cancelled' 
                          THEN b.id END) as cancelled_bookings
       FROM bookings b
       LEFT JOIN payments p ON b.id = p.booking_id AND p.status = 'success'
       WHERE MONTH(b.created_at) = target_month
       AND YEAR(b.created_at) = target_year;
   END //
   DELIMITER ;

Cách sử dụng:
   CALL GenerateMonthlyReport(10, 2025);

═══════════════════════════════════════════════════════════════════════════════
8. TRIGGERS
═══════════════════════════════════════════════════════════════════════════════

Triggers tự động thực hiện khi có sự kiện INSERT, UPDATE, DELETE


┌─────────────────────────────────────────────────────────────────────────────┐
│ 8.1. TRIGGER: update_room_status_on_booking                                 │
└─────────────────────────────────────────────────────────────────────────────┘

Mục đích: Tự động cập nhật trạng thái phòng khi booking thay đổi

Sự kiện: AFTER UPDATE ON bookings

Logic:
   - Khi booking chuyển sang 'checked-in' → room status = 'occupied'
   - Khi booking chuyển sang 'checked-out' → room status = 'available'
   - Khi booking bị 'cancelled' → room status = 'available'

Định nghĩa:
   DELIMITER //
   CREATE TRIGGER update_room_status_on_booking
   AFTER UPDATE ON bookings
   FOR EACH ROW
   BEGIN
       IF NEW.status = 'checked-in' AND OLD.status != 'checked-in' THEN
           UPDATE rooms SET status = 'occupied' WHERE id = NEW.room_id;
       ELSEIF NEW.status = 'checked-out' AND OLD.status != 'checked-out' THEN
           UPDATE rooms SET status = 'available' WHERE id = NEW.room_id;
       ELSEIF NEW.status = 'cancelled' AND OLD.status != 'cancelled' THEN
           UPDATE rooms SET status = 'available' WHERE id = NEW.room_id;
       END IF;
   END //
   DELIMITER ;


┌─────────────────────────────────────────────────────────────────────────────┐
│ 8.2. TRIGGER: update_room_rating_on_review                                  │
└─────────────────────────────────────────────────────────────────────────────┘

Mục đích: Tự động cập nhật rating trung bình của phòng khi có review mới

Sự kiện: AFTER INSERT ON reviews

Định nghĩa:
   DELIMITER //
   CREATE TRIGGER update_room_rating_on_review
   AFTER INSERT ON reviews
   FOR EACH ROW
   BEGIN
       UPDATE rooms r
       SET 
           r.rating = (
               SELECT AVG(rv.rating)
               FROM reviews rv
               JOIN bookings b ON rv.booking_id = b.id
               WHERE b.room_id = r.id
           ),
           r.review_count = (
               SELECT COUNT(*)
               FROM reviews rv
               JOIN bookings b ON rv.booking_id = b.id
               WHERE b.room_id = r.id
           )
       WHERE r.id = (
           SELECT room_id FROM bookings WHERE id = NEW.booking_id
       );
   END //
   DELIMITER ;

═══════════════════════════════════════════════════════════════════════════════
9. QUERIES QUAN TRỌNG
═══════════════════════════════════════════════════════════════════════════════

Các query SQL thường dùng trong hệ thống


┌─────────────────────────────────────────────────────────────────────────────┐
│ 9.1. Tìm phòng trống theo ngày                                              │
└─────────────────────────────────────────────────────────────────────────────┘

SELECT r.*
FROM rooms r
WHERE r.status = 'available'
AND r.id NOT IN (
    SELECT DISTINCT room_id 
    FROM bookings 
    WHERE status IN ('confirmed', 'checked-in')
    AND (
        (check_in_date <= '2025-10-15' AND check_out_date > '2025-10-15')
        OR (check_in_date < '2025-10-20' AND check_out_date >= '2025-10-20')
        OR (check_in_date >= '2025-10-15' AND check_out_date <= '2025-10-20')
    )
)
ORDER BY price_per_night ASC;


┌─────────────────────────────────────────────────────────────────────────────┐
│ 9.2. Lấy booking với đầy đủ thông tin                                       │
└─────────────────────────────────────────────────────────────────────────────┘

SELECT 
    b.id,
    b.check_in_date,
    b.check_out_date,
    b.guests_count,
    b.total_amount,
    b.status,
    b.payment_status,
    u.full_name as customer_name,
    u.email as customer_email,
    u.phone as customer_phone,
    r.room_number,
    r.room_type,
    r.name as room_name,
    r.price_per_night,
    GROUP_CONCAT(s.name SEPARATOR ', ') as services
FROM bookings b
JOIN users u ON b.user_id = u.id
JOIN rooms r ON b.room_id = r.id
LEFT JOIN booking_services bs ON b.id = bs.booking_id
LEFT JOIN services s ON bs.service_id = s.id
WHERE b.id = ?
GROUP BY b.id;


┌─────────────────────────────────────────────────────────────────────────────┐
│ 9.3. Thống kê doanh thu theo tháng                                          │
└─────────────────────────────────────────────────────────────────────────────┘

SELECT 
    DATE_FORMAT(p.paid_at, '%Y-%m') as month,
    COUNT(DISTINCT b.id) as total_bookings,
    SUM(p.amount) as total_revenue,
    AVG(p.amount) as avg_booking_value,
    COUNT(DISTINCT b.room_id) as rooms_used
FROM payments p
JOIN bookings b ON p.booking_id = b.id
WHERE p.status = 'success'
AND p.paid_at BETWEEN '2025-01-01' AND '2025-12-31'
GROUP BY DATE_FORMAT(p.paid_at, '%Y-%m')
ORDER BY month DESC;


┌─────────────────────────────────────────────────────────────────────────────┐
│ 9.4. Top khách hàng theo doanh thu                                          │
└─────────────────────────────────────────────────────────────────────────────┘

SELECT 
    u.id,
    u.full_name,
    u.email,
    COUNT(b.id) as total_bookings,
    SUM(b.total_amount) as total_spent,
    AVG(b.total_amount) as avg_booking_value,
    MAX(b.created_at) as last_booking
FROM users u
JOIN bookings b ON u.id = b.user_id
WHERE u.role = 'customer'
AND b.status IN ('confirmed', 'checked-in', 'checked-out', 'completed')
GROUP BY u.id
ORDER BY total_spent DESC
LIMIT 10;


┌─────────────────────────────────────────────────────────────────────────────┐
│ 9.5. Tỷ lệ lấp đầy phòng                                                    │
└─────────────────────────────────────────────────────────────────────────────┘

SELECT 
    DATE_FORMAT(b.check_in_date, '%Y-%m') as month,
    COUNT(DISTINCT b.room_id) as rooms_booked,
    (SELECT COUNT(*) FROM rooms WHERE status != 'maintenance') as total_rooms,
    SUM(DATEDIFF(b.check_out_date, b.check_in_date)) as total_nights,
    ROUND(
        (SUM(DATEDIFF(b.check_out_date, b.check_in_date)) / 
         ((SELECT COUNT(*) FROM rooms) * DAY(LAST_DAY(b.check_in_date)))) * 100,
        2
    ) as occupancy_rate
FROM bookings b
WHERE b.status IN ('confirmed', 'checked-in', 'checked-out', 'completed')
AND b.check_in_date >= '2025-01-01'
GROUP BY DATE_FORMAT(b.check_in_date, '%Y-%m')
ORDER BY month DESC;


┌─────────────────────────────────────────────────────────────────────────────┐
│ 9.6. Reviews của phòng với thông tin khách                                  │
└─────────────────────────────────────────────────────────────────────────────┘

SELECT 
    r.id,
    r.rating,
    r.comment,
    r.created_at,
    u.full_name as customer_name,
    u.avatar as customer_avatar,
    b.check_in_date,
    b.check_out_date
FROM reviews r
JOIN users u ON r.user_id = u.id
JOIN bookings b ON r.booking_id = b.id
WHERE b.room_id = ?
ORDER BY r.created_at DESC;

═══════════════════════════════════════════════════════════════════════════════
10. OPTIMIZATION VÀ BEST PRACTICES
═══════════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────────┐
│ 10.1. Database Optimization Tips                                            │
└─────────────────────────────────────────────────────────────────────────────┘

✅ Indexing Strategy:
   - Tạo index cho foreign keys
   - Tạo index cho columns thường dùng trong WHERE, JOIN, ORDER BY
   - Tạo composite index cho queries thường join nhiều columns
   - Tránh over-indexing (làm chậm INSERT, UPDATE)

✅ Query Optimization:
   - Sử dụng EXPLAIN để phân tích query
   - Tránh SELECT *, chỉ lấy columns cần thiết
   - Sử dụng LIMIT khi không cần tất cả records
   - Sử dụng JOIN thay vì subqueries khi có thể
   - Cache các queries hay dùng

✅ Data Types:
   - Dùng INT cho IDs (nhỏ hơn VARCHAR)
   - Dùng ENUM cho columns có giá trị cố định
   - Dùng DECIMAL cho tiền tệ (tránh floating point errors)
   - Dùng JSON cho data linh hoạt (MySQL 5.7+)
   - Dùng DATE/DATETIME đúng mục đích

✅ Normalization:
   - Tuân thủ 3NF (Third Normal Form)
   - Tránh duplicate data
   - Sử dụng junction tables cho many-to-many relationships
   - Denormalize có chọn lọc khi cần performance

✅ Transactions:
   - Sử dụng transactions cho operations liên quan nhiều tables
   - Đảm bảo ACID properties
   - Rollback khi có lỗi

✅ Security:
   - Sử dụng prepared statements (防SQL injection)
   - Hash passwords với bcrypt
   - Không lưu sensitive data dạng plain text
   - Sử dụng SSL/TLS cho connections
   - Regular backups


┌─────────────────────────────────────────────────────────────────────────────┐
│ 10.2. Backup và Recovery                                                    │
└─────────────────────────────────────────────────────────────────────────────┘

📦 Backup Strategy:
   - Daily automated backups
   - Weekly full backups
   - Monthly archived backups
   - Store backups offsite (cloud storage)

Backup command:
   mysqldump -u root -p homestay_db > backup_$(date +%Y%m%d).sql

Restore command:
   mysql -u root -p homestay_db < backup_20251011.sql


┌─────────────────────────────────────────────────────────────────────────────┐
│ 10.3. Monitoring                                                            │
└─────────────────────────────────────────────────────────────────────────────┘

📊 Metrics to Monitor:
   - Query execution time
   - Slow query log
   - Connection pool usage
   - Table sizes
   - Index usage
   - Deadlocks
   - Replication lag (if using replication)

Enable slow query log:
   SET GLOBAL slow_query_log = 'ON';
   SET GLOBAL long_query_time = 2; -- queries > 2 seconds


┌─────────────────────────────────────────────────────────────────────────────┐
│ 10.4. Scaling Strategy                                                      │
└─────────────────────────────────────────────────────────────────────────────┘

🚀 Vertical Scaling:
   - Tăng RAM
   - Tăng CPU
   - Sử dụng SSD

🔀 Horizontal Scaling:
   - Master-Slave Replication
   - Read replicas cho read-heavy workloads
   - Sharding (phân chia data)

💾 Caching:
   - Redis/Memcached cho session data
   - Application-level caching
   - Query result caching

═══════════════════════════════════════════════════════════════════════════════
KẾT LUẬN
═══════════════════════════════════════════════════════════════════════════════

📝 Tóm tắt thiết kế:
   - Database được thiết kế normalized, tối ưu cho hệ thống quản lý homestay
   - 11 tables chính với relationships rõ ràng
   - Đầy đủ constraints, indexes để đảm bảo data integrity và performance
   - Views, Stored Procedures, Triggers để tự động hóa business logic
   - Scalable và maintainable

🔧 Files liên quan:
   - /database/schema.sql - Database schema
   - /database/seed.sql - Sample data
   - /database/complete_database.sql - Full database với data

📚 Tài liệu tham khảo:
   - MySQL 8.0 Reference Manual
   - Database Design Best Practices
   - SQL Performance Tuning

📅 Cập nhật lần cuối: 2025-10-11
📧 Liên hệ: support@homestay.com

═══════════════════════════════════════════════════════════════════════════════


