// Job ƒë·ªÉ t·ª± ƒë·ªông h·ªßy c√°c ƒë∆°n ƒë·∫∑t ph√≤ng "Thanh to√°n sau" qu√° 5 ph√∫t
const { executeQuery } = require("../config/database");
const { Booking } = require("../models");

/**
 * H·ªßy c√°c ƒë∆°n ƒë·∫∑t ph√≤ng "Thanh to√°n sau" ƒë√£ qu√° 5 ph√∫t m√† ch∆∞a thanh to√°n
 */
const cancelExpiredPayLaterBookings = async () => {
  try {
    console.log("üîÑ [CRON] ƒêang ki·ªÉm tra c√°c ƒë∆°n thanh to√°n sau qu√° h·∫°n...");

    // T√¨m c√°c payment "pay_later" ƒë√£ qu√° 5 ph√∫t v√† v·∫´n ·ªü tr·∫°ng th√°i pending
    const query = `
      SELECT p.*, b.id as booking_id, b.status as booking_status, b.user_id
      FROM payments p
      JOIN bookings b ON p.booking_id = b.id
      WHERE p.payment_method = 'pay_later'
        AND p.payment_status = 'pending'
        AND b.status = 'pending'
        AND TIMESTAMPDIFF(MINUTE, p.created_at, NOW()) >= 5
    `;

    const expiredPayments = await executeQuery(query);

    if (expiredPayments.length === 0) {
      console.log("‚úÖ [CRON] Kh√¥ng c√≥ ƒë∆°n thanh to√°n sau qu√° h·∫°n");
      return;
    }

    console.log(
      `‚ö†Ô∏è [CRON] T√¨m th·∫•y ${expiredPayments.length} ƒë∆°n thanh to√°n sau qu√° h·∫°n`
    );

    // H·ªßy t·ª´ng booking
    for (const payment of expiredPayments) {
      try {
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i payment th√†nh cancelled
        await executeQuery(
          `UPDATE payments SET payment_status = 'cancelled', notes = CONCAT(notes, ' - T·ª± ƒë·ªông h·ªßy sau 5 ph√∫t') WHERE id = ?`,
          [payment.id]
        );

        // H·ªßy booking
        const booking = await Booking.findById(payment.booking_id);
        if (booking && booking.status === "pending") {
          await booking.cancel();
          console.log(
            `‚úÖ [CRON] ƒê√£ h·ªßy booking #${payment.booking_id} do qu√° h·∫°n thanh to√°n sau`
          );
        }
      } catch (error) {
        console.error(
          `‚ùå [CRON] L·ªói khi h·ªßy booking #${payment.booking_id}:`,
          error.message
        );
      }
    }

    console.log(
      `‚úÖ [CRON] ƒê√£ x·ª≠ l√Ω xong ${expiredPayments.length} ƒë∆°n thanh to√°n sau qu√° h·∫°n`
    );
  } catch (error) {
    console.error("‚ùå [CRON] L·ªói khi ch·∫°y job h·ªßy thanh to√°n sau:", error);
  }
};

module.exports = { cancelExpiredPayLaterBookings };
